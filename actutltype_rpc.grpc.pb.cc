// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: actutltype_rpc.proto
#include "StdAfx.h"
#include "actutltype_rpc.pb.h"
#include "actutltype_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Device_method_names[] = {
  "/Device/GetDevice",
  "/Device/SetDevice",
};

std::unique_ptr< Device::Stub> Device::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Device::Stub> stub(new Device::Stub(channel));
  return stub;
}

Device::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetDevice_(Device_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDevice_(Device_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Device::Stub::GetDevice(::grpc::ClientContext* context, const ::GetDeviceRequest& request, ::GetDeviceReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDevice_, context, request, response);
}

void Device::Stub::experimental_async::GetDevice(::grpc::ClientContext* context, const ::GetDeviceRequest* request, ::GetDeviceReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, std::move(f));
}

void Device::Stub::experimental_async::GetDevice(::grpc::ClientContext* context, const ::GetDeviceRequest* request, ::GetDeviceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetDeviceReply>* Device::Stub::PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetDeviceReply>::Create(channel_.get(), cq, rpcmethod_GetDevice_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::GetDeviceReply>* Device::Stub::AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Device::Stub::SetDevice(::grpc::ClientContext* context, const ::SetDeviceRequest& request, ::SetDeviceReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDevice_, context, request, response);
}

void Device::Stub::experimental_async::SetDevice(::grpc::ClientContext* context, const ::SetDeviceRequest* request, ::SetDeviceReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDevice_, context, request, response, std::move(f));
}

void Device::Stub::experimental_async::SetDevice(::grpc::ClientContext* context, const ::SetDeviceRequest* request, ::SetDeviceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SetDeviceReply>* Device::Stub::PrepareAsyncSetDeviceRaw(::grpc::ClientContext* context, const ::SetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SetDeviceReply>::Create(channel_.get(), cq, rpcmethod_SetDevice_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::SetDeviceReply>* Device::Stub::AsyncSetDeviceRaw(::grpc::ClientContext* context, const ::SetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

Device::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Device_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Device::Service, ::GetDeviceRequest, ::GetDeviceReply>(
          [](Device::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetDeviceRequest* req,
             ::GetDeviceReply* resp) {
               return service->GetDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Device_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Device::Service, ::SetDeviceRequest, ::SetDeviceReply>(
          [](Device::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetDeviceRequest* req,
             ::SetDeviceReply* resp) {
               return service->SetDevice(ctx, req, resp);
             }, this)));
}

Device::Service::~Service() {
}

::grpc::Status Device::Service::GetDevice(::grpc::ServerContext* context, const ::GetDeviceRequest* request, ::GetDeviceReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Device::Service::SetDevice(::grpc::ServerContext* context, const ::SetDeviceRequest* request, ::SetDeviceReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


