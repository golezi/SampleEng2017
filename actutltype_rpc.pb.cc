// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actutltype_rpc.proto
#include "StdAfx.h"
#include "actutltype_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr GetDeviceRequest::GetDeviceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetDeviceRequestDefaultTypeInternal {
  constexpr GetDeviceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDeviceRequestDefaultTypeInternal() {}
  union {
    GetDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDeviceRequestDefaultTypeInternal _GetDeviceRequest_default_instance_;
constexpr GetDeviceReply::GetDeviceReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(0){}
struct GetDeviceReplyDefaultTypeInternal {
  constexpr GetDeviceReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDeviceReplyDefaultTypeInternal() {}
  union {
    GetDeviceReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDeviceReplyDefaultTypeInternal _GetDeviceReply_default_instance_;
constexpr SetDeviceRequest::SetDeviceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(0){}
struct SetDeviceRequestDefaultTypeInternal {
  constexpr SetDeviceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetDeviceRequestDefaultTypeInternal() {}
  union {
    SetDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetDeviceRequestDefaultTypeInternal _SetDeviceRequest_default_instance_;
constexpr SetDeviceReply::SetDeviceReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(0){}
struct SetDeviceReplyDefaultTypeInternal {
  constexpr SetDeviceReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetDeviceReplyDefaultTypeInternal() {}
  union {
    SetDeviceReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetDeviceReplyDefaultTypeInternal _SetDeviceReply_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_actutltype_5frpc_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_actutltype_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_actutltype_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_actutltype_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetDeviceRequest, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetDeviceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetDeviceReply, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetDeviceRequest, device_),
  PROTOBUF_FIELD_OFFSET(::SetDeviceRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetDeviceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetDeviceReply, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GetDeviceRequest)},
  { 6, -1, sizeof(::GetDeviceReply)},
  { 12, -1, sizeof(::SetDeviceRequest)},
  { 19, -1, sizeof(::SetDeviceReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetDeviceReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetDeviceReply_default_instance_),
};

const char descriptor_table_protodef_actutltype_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024actutltype_rpc.proto\"\"\n\020GetDeviceReque"
  "st\022\016\n\006Device\030\001 \001(\t\"!\n\016GetDeviceReply\022\017\n\007"
  "message\030\001 \001(\005\"0\n\020SetDeviceRequest\022\016\n\006Dev"
  "ice\030\001 \001(\t\022\014\n\004Data\030\002 \001(\005\"!\n\016SetDeviceRepl"
  "y\022\017\n\007message\030\001 \001(\0052n\n\006Device\0221\n\tGetDevic"
  "e\022\021.GetDeviceRequest\032\017.GetDeviceReply\"\000\022"
  "1\n\tSetDevice\022\021.SetDeviceRequest\032\017.SetDev"
  "iceReply\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_actutltype_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_actutltype_5frpc_2eproto = {
  false, false, 298, descriptor_table_protodef_actutltype_5frpc_2eproto, "actutltype_rpc.proto", 
  &descriptor_table_actutltype_5frpc_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_actutltype_5frpc_2eproto::offsets,
  file_level_metadata_actutltype_5frpc_2eproto, file_level_enum_descriptors_actutltype_5frpc_2eproto, file_level_service_descriptors_actutltype_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_actutltype_5frpc_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_actutltype_5frpc_2eproto);
  return descriptor_table_actutltype_5frpc_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_actutltype_5frpc_2eproto(&descriptor_table_actutltype_5frpc_2eproto);

// ===================================================================

class GetDeviceRequest::_Internal {
 public:
};

GetDeviceRequest::GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetDeviceRequest)
}
GetDeviceRequest::GetDeviceRequest(const GetDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device().empty()) {
    device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:GetDeviceRequest)
}

void GetDeviceRequest::SharedCtor() {
device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDeviceRequest::~GetDeviceRequest() {
  // @@protoc_insertion_point(destructor:GetDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeviceRequest::ArenaDtor(void* object) {
  GetDeviceRequest* _this = reinterpret_cast< GetDeviceRequest* >(object);
  (void)_this;
}
void GetDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetDeviceRequest.Device"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Device = 1;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetDeviceRequest.Device");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetDeviceRequest)
  return target;
}

size_t GetDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetDeviceRequest)
    MergeFrom(*source);
  }
}

void GetDeviceRequest::MergeFrom(const GetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device().size() > 0) {
    _internal_set_device(from._internal_device());
  }
}

void GetDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceRequest::CopyFrom(const GetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceRequest::IsInitialized() const {
  return true;
}

void GetDeviceRequest::InternalSwap(GetDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDeviceReply::_Internal {
 public:
};

GetDeviceReply::GetDeviceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetDeviceReply)
}
GetDeviceReply::GetDeviceReply(const GetDeviceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_ = from.message_;
  // @@protoc_insertion_point(copy_constructor:GetDeviceReply)
}

void GetDeviceReply::SharedCtor() {
message_ = 0;
}

GetDeviceReply::~GetDeviceReply() {
  // @@protoc_insertion_point(destructor:GetDeviceReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDeviceReply::ArenaDtor(void* object) {
  GetDeviceReply* _this = reinterpret_cast< GetDeviceReply* >(object);
  (void)_this;
}
void GetDeviceReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDeviceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:GetDeviceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetDeviceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 message = 1;
  if (this->message() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetDeviceReply)
  return target;
}

size_t GetDeviceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetDeviceReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 message = 1;
  if (this->message() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetDeviceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetDeviceReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetDeviceReply)
    MergeFrom(*source);
  }
}

void GetDeviceReply::MergeFrom(const GetDeviceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetDeviceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message() != 0) {
    _internal_set_message(from._internal_message());
  }
}

void GetDeviceReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetDeviceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceReply::CopyFrom(const GetDeviceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetDeviceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceReply::IsInitialized() const {
  return true;
}

void GetDeviceReply::InternalSwap(GetDeviceReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetDeviceRequest::_Internal {
 public:
};

SetDeviceRequest::SetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetDeviceRequest)
}
SetDeviceRequest::SetDeviceRequest(const SetDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device().empty()) {
    device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device(), 
      GetArena());
  }
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:SetDeviceRequest)
}

void SetDeviceRequest::SharedCtor() {
device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_ = 0;
}

SetDeviceRequest::~SetDeviceRequest() {
  // @@protoc_insertion_point(destructor:SetDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetDeviceRequest::ArenaDtor(void* object) {
  SetDeviceRequest* _this = reinterpret_cast< SetDeviceRequest* >(object);
  (void)_this;
}
void SetDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SetDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmpty();
  data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SetDeviceRequest.Device"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Device = 1;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetDeviceRequest.Device");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device(), target);
  }

  // int32 Data = 2;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetDeviceRequest)
  return target;
}

size_t SetDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // int32 Data = 2;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetDeviceRequest)
    MergeFrom(*source);
  }
}

void SetDeviceRequest::MergeFrom(const SetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device().size() > 0) {
    _internal_set_device(from._internal_device());
  }
  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
}

void SetDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDeviceRequest::CopyFrom(const SetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDeviceRequest::IsInitialized() const {
  return true;
}

void SetDeviceRequest::InternalSwap(SetDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetDeviceReply::_Internal {
 public:
};

SetDeviceReply::SetDeviceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetDeviceReply)
}
SetDeviceReply::SetDeviceReply(const SetDeviceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_ = from.message_;
  // @@protoc_insertion_point(copy_constructor:SetDeviceReply)
}

void SetDeviceReply::SharedCtor() {
message_ = 0;
}

SetDeviceReply::~SetDeviceReply() {
  // @@protoc_insertion_point(destructor:SetDeviceReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetDeviceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetDeviceReply::ArenaDtor(void* object) {
  SetDeviceReply* _this = reinterpret_cast< SetDeviceReply* >(object);
  (void)_this;
}
void SetDeviceReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetDeviceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetDeviceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SetDeviceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDeviceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDeviceReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetDeviceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 message = 1;
  if (this->message() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetDeviceReply)
  return target;
}

size_t SetDeviceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetDeviceReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 message = 1;
  if (this->message() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDeviceReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetDeviceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SetDeviceReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetDeviceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetDeviceReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetDeviceReply)
    MergeFrom(*source);
  }
}

void SetDeviceReply::MergeFrom(const SetDeviceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetDeviceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message() != 0) {
    _internal_set_message(from._internal_message());
  }
}

void SetDeviceReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetDeviceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDeviceReply::CopyFrom(const SetDeviceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetDeviceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDeviceReply::IsInitialized() const {
  return true;
}

void SetDeviceReply::InternalSwap(SetDeviceReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDeviceReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GetDeviceRequest* Arena::CreateMaybeMessage< ::GetDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetDeviceReply* Arena::CreateMaybeMessage< ::GetDeviceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetDeviceReply >(arena);
}
template<> PROTOBUF_NOINLINE ::SetDeviceRequest* Arena::CreateMaybeMessage< ::SetDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SetDeviceReply* Arena::CreateMaybeMessage< ::SetDeviceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetDeviceReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
